#! /usr/bin/env python

HEADER = """
swift-setup is a simple script that configures a basic version of openstack 
swift for testing. The script is based on documentation from:
http://vivekraghuwanshi.wordpress.com/configure-swift-storage-in-ubuntu-12-04/
and from http://docs.openstack.org/developer/swift/development_saio.html
"""

import ConfigParser, os, sys, re, shutil, subprocess, commands, getopt, socket, time

scriptdir=os.path.dirname(os.path.realpath(__file__)) #the directory this script resides in
mydomain = os.popen("hostname -d").read().strip()
hostname = os.popen("hostname").read().strip()
ipaddress = os.popen("ifconfig").read().strip().split("\n")[1].split()[1][5:]
user=os.getenv('USER')
if not user:
    user=os.getenv('USERNAME')

def main(argv):
    checkEnv(user)
    try:
        opts,args=getopt.getopt(argv,"n:h")
        for opt,arg in opts:
            if opt in ("-h"):
                usage()
                sys.exit()
            elif opt in ("-n"): # all storage nodes
                nodes=arg.split(',')
        if not args:
            usage()
            sys.exit()
        if args[0] == 'storage':
            setupCommon()
            setupStorage()
        elif args[0] == 'proxy':
            setupCommon()
            setupProxy(nodes)
        else:
            usage()
            sys.exit()
    except getopt.GetoptError:
            print("\noption not available, correct usage:")
            usage()

def checkEnv(user):
    if user != 'root':
        print("you need to execute this script as root, try sudo")
        sys.exit()
    if not os.path.isfile('/etc/debian_version'):
        print ("This setup only works on Debian/Ubuntu systems")
        sys.exit()
    if sys.hexversion<0x02070000:
        print ("Python 2.7 or higher required")
        sys.exit()

def setupCommon():
    print ('common ...............')
    script = """
    apt-get -y install python-software-properties swift
    #apt-get -y install gcc git-core
    #add-apt-repository -y ppa:swift-core/release
    #apt-get update
    #apt-get -y install curl python-configobj python-netifaces
    #apt-get -y install python-coverage python-dev python-nose python-setuptools 
    #apt-get -y install python-simplejson python-xattr sqlite3 xfsprogs python-webob 
    #apt-get -y install python-eventlet python-greenlet python-pastedeploy python-memcache
    mkdir -p /etc/swift
    chown -R swift:swift /etc/swift/
    """
    results=run_script(script)
    parser1 = ConfigParser.SafeConfigParser()
    parser1.add_section('swift-hash')
    parser1.set('swift-hash', 'swift_hash_path_suffix', 'qazwsxedcrfvtgb')
    parser1.write(open('/etc/swift/swift.conf','w'))

def setupStorage():
    print ('Storage ..............')
    if not os.path.isfile('/etc/swift/account.ring.gz'):
        print("\n***** WARNING: /etc/swift/account.ring.gz not found *********")
        print("***** You did not copy the ring files from the proxy ??? ****\n")
        time.sleep(5)
    script = """
    apt-get -y install swift-account swift-container swift-object xfsprogs
    mkfs.xfs -i size=1024 /dev/sdb -f
    echo "/dev/sdb /srv/node/sdb xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
    mkdir -p /srv/node/sdb
    mount /srv/node/sdb
    chown -R swift:swift /srv/node
    """
    results=run_script(script)

    parser1 = ConfigParser.SafeConfigParser()
    parser1.add_section('dummy')
    parser1.set('dummy', 'uid', 'swift')
    parser1.set('dummy', 'gid', 'swift')
    parser1.set('dummy', 'log file', '/var/log/rsyncd.log')
    parser1.set('dummy', 'pid file', '/var/run/rsync-swift.pid')
    parser1.set('dummy', 'address', '%s' % hostname)
    parser1.add_section('account')
    parser1.set('account', 'max connections', '2')
    parser1.set('account', 'path', '/srv/node/')
    parser1.set('account', 'read only', 'false')
    parser1.set('account', 'lock file', '/var/lock/account.lock')
    parser1.add_section('container')
    parser1.set('container', 'max connections', '2')
    parser1.set('container', 'path', '/srv/node/')
    parser1.set('container', 'read only', 'false')
    parser1.set('container', 'lock file', '/var/lock/container.lock')
    parser1.add_section('object')
    parser1.set('object', 'max connections', '2')
    parser1.set('object', 'path', '/srv/node/')
    parser1.set('object', 'read only', 'false')
    parser1.set('object', 'lock file', '/var/lock/object.lock')
    parser1.write(open('/etc/rsyncd.conf','w'))
    ret=file_replace('/etc/rsyncd.conf','\[dummy\]','# rsync config for openstack swift')
    ret=file_replace('/etc/default/rsync', 'RSYNC_ENABLE=false','RSYNC_ENABLE=true')
    script = """
    service rsync restart
    swift-init object-server restart  
    swift-init object-replicator restart
    swift-init object-updater restart
    swift-init object-auditor restart
    swift-init container-server restart
    swift-init container-replicator restart
    swift-init container-updater restart
    swift-init container-auditor restart
    swift-init account-server restart
    swift-init account-replicator restart
    swift-init account-auditor restart
    """
    results=run_script(script)
    if not os.path.isfile('/etc/swift/account.ring.gz'):
        print("\n***** WARNING: /etc/swift/account.ring.gz not found *********")
        print("***** You did not copy the ring files from the proxy ??? ****\n")
    else:
        print("\nSwift storage node %s setup finished. Please proceed to the next node." % hostname)

def setupProxy(nodes):
    print ('Proxy ..............')

    nodeaddresses=[]
    for node in nodes:
        if hostname.startswith(node):
            nodeaddresses.append(ipaddress)
        else:
            nodeaddresses.append(socket.gethostbyaddr(node)[2][0])
    script = """
    apt-get -y install swift-proxy memcached keystone
    openssl req -new -x509 -nodes -out /etc/swift/cert.crt -keyout /etc/swift/cert.key
    """
    results=run_script(script)
    ret=file_replace('/etc/memcached.conf', '-l 127.0.0.1','#-l 127.0.0.1')
    script = """
    service memcached restart
    """
    results=run_script(script)
    parser1 = ConfigParser.SafeConfigParser()
    parser1.add_section('DEFAULT1')
    parser1.set('DEFAULT1', 'bind_port', '443')
    parser1.set('DEFAULT1', 'user', 'swift')
    parser1.set('DEFAULT1', 'log_facility', 'LOG_LOCAL')
    parser1.set('DEFAULT1', 'bind_ip', '%s' % ipaddress)
    parser1.set('DEFAULT1', 'cert_file', '/etc/swift/cert.crt')
    parser1.set('DEFAULT1', 'key_file', '/etc/swift/cert.key')
    parser1.set('DEFAULT1', 'workers', '8')
    parser1.add_section('pipeline:main')
    parser1.set('pipeline:main', '#pipeline', 'catch_errors healthcheck cache authtoken keystone proxy-server')
    parser1.set('pipeline:main', 'pipeline', 'catch_errors healthcheck cache tempauth proxy-server')
    parser1.add_section('app:proxy-server')
    parser1.set('app:proxy-server', 'use', 'egg:swift#proxy')
    parser1.set('app:proxy-server', '#allow_account_management', 'true')
    parser1.set('app:proxy-server', 'account_autocreate', 'true')
    parser1.add_section('filter:keystone')
    parser1.set('filter:keystone', 'paste.filter_factory', 'keystone.middleware.swift_auth:filter_factory')
    parser1.set('filter:keystone', 'operator_roles', 'admin, swiftoperator')
    parser1.add_section('filter:authtoken')
    parser1.set('filter:authtoken', 'paste.filter_factory', 'keystone.middleware.auth_token:filter_factory')
    parser1.set('filter:authtoken', 'delay_auth_decision', '1')
    parser1.set('filter:authtoken', 'service_port', '5000')
    parser1.set('filter:authtoken', 'service_host', 'authserver')
    parser1.set('filter:authtoken', 'auth_port', '35357')
    parser1.set('filter:authtoken', 'auth_host', 'authserver')
    parser1.set('filter:authtoken', 'auth_token', 'ADMIN')
    parser1.set('filter:authtoken', 'admin_token', 'ADMIN')
    parser1.add_section('filter:tempauth')
    parser1.set('filter:tempauth', 'use', 'egg:swift#tempauth')
    parser1.set('filter:tempauth', 'user_system_root', 'testpass .admin')
    parser1.set('filter:tempauth', 'user_test_tester', 'testing .admin')
    parser1.add_section('filter:cache')
    parser1.set('filter:cache', 'use', 'egg:swift#memcache')
    parser1.set('filter:cache', 'set log_name', 'cache')
    parser1.add_section('filter:catch_errors')
    parser1.set('filter:catch_errors', 'use', 'egg:swift#catch_errors')
    parser1.add_section('filter:healthcheck')
    parser1.set('filter:healthcheck', 'use', 'egg:swift#healthcheck')
    parser1.add_section('filter:proxy-logging')
    parser1.set('filter:proxy-logging', 'use', 'egg:swift#proxy_logging')
    parser1.write(open('/etc/swift/proxy-server.conf','w'))
    #ret=file_replace('/etc/swift/proxy-server.conf','\[DEFAULT1\]', '[DEFAULT]')
    script = "sed -i 's/\[DEFAULT1\]/\[DEFAULT\]/' /etc/swift/proxy-server.conf"
    results=run_script(script)
    os.chdir('/etc/swift')
    #Create the account, container and object rings#
    script = """
    swift-ring-builder account.builder create 18 3 1
    swift-ring-builder container.builder create 18 3 1
    swift-ring-builder object.builder create 18 3 1
    """
    results=run_script(script)
    #every storage device on each node add entries to each ring#
    cnt=0
    for nodeaddress in nodeaddresses:
        cnt+=1
        script = """
        swift-ring-builder account.builder add z%s-%s:6002/sdb 100
        swift-ring-builder container.builder add z%s-%s:6001/sdb 100
        swift-ring-builder object.builder add z%s-%s:6000/sdb 100
        """ % (cnt,nodeaddress,cnt,nodeaddress,cnt,nodeaddress)
        results=run_script(script)
    
    #Verify the ring contents for each ring and rebalance the ring#
    script = """
    swift-ring-builder account.builder
    swift-ring-builder container.builder
    swift-ring-builder object.builder
    swift-ring-builder account.builder rebalance
    swift-ring-builder container.builder rebalance
    swift-ring-builder object.builder rebalance
    swift-init proxy start
    """
    results=run_script(script)

    msg = """
    Now copy the account.ring.gz, container.ring.gz, and object.ring.gz
    files to each of the Proxy and Storage nodes in /etc/swift/ and
    make sure they are owned by the swift user.

     e.g.
     eval `ssh-agent`; ssh-add
    """
    print (msg)
    for node in nodes:
        print('     ssh root@%s "mkdir /etc/swift"' % node)
        print('     scp /etc/swift/*.gz root@%s:/etc/swift/' % node)
        print('     ssh root@%s "chown -R swift:swift /etc/swift"\n' % node)
    msg = """
    You might have to restart the swift proxy after the setup 
    is complete: swift-init proxy restart
    """    
    print(msg)

def file_replace(fname, pat, s_after):
    # first, see if the pattern is even in the file.
    with open(fname) as f:
        if not any(re.search(pat, line) for line in f):
            return # pattern does not occur in file so we are done.
    with open(fname) as f:  
        if any(re.search(s_after, line) for line in f):
            return # target pattern already in file so we are also done.
    # pattern is in the file, so perform replace operation.
    with open(fname) as f:
        out_fname = fname + ".tmp"
        out = open(out_fname, "w")
        for line in f:
            out.write(re.sub(pat, s_after, line))
        out.close()
        os.rename(out_fname, fname)

def run_script(script, output=True, stdin=None):
    """Returns (stdout, stderr), raises error on non-zero return code"""
    # Note: by using a list here (['bash', ...]) you avoid quoting issues, as the 
    # arguments are passed in exactly this order (spaces, quotes, and newlines won't
    # cause problems):
    stdout = ""
    for line in script.split('\n'):
        if output:
            try:
                if line:
                    print("************* Executing command: %s" % line)
                    stdout = subprocess.call(line,shell=True)
            except:
                print("Error executing command: %s" % line)
        else:
            proc = subprocess.Popen(['bash', '-c', line],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                stdin=subprocess.PIPE)
            stdout, stderr = proc.communicate()
            if proc.returncode:
                raise ScriptException(proc.returncode, stdout, stderr, script)
    return stdout

class ScriptException(Exception):
    def __init__(self, returncode, stdout, stderr, script):
        self.returncode = returncode
        self.stdout = stdout
        self.stderr = stderr
        Exception.__init__('Error in script')

def raw_input_default(prompt,dflt=None):
    if dflt:
        prompt = "%s [%s]: " % (prompt, dflt)
    res = raw_input(prompt)
    if not res and dflt:
        return dflt
    return res

def usage():
    print (HEADER)
    print ("\nsudo swift-setup [options] [proxy|storage]")
    print ("\t-n node1,node2,node2 - comma separated list of storage nodes")
    print ("\t-h show this help\n")
    print ("\t First: run this command on the proxy server:")
    print ("\t\t sudo swift-setup -n server1,server,server3 proxy")
    print ("\t and follow all instructions like copying ring files via scp")
    print ("\t Second: run this command on each of the storage nodes:")
    print ("\t\t sudo swift-setup storage")
    print ("\t Third: use e.g. Cloudberry Explorer to connect to the proxy:")
    print ("\t e.g. https://%s.%s/auth/v1.0 with credentials:" % (hostname,mydomain))
    print ("\t user = test:tester and password = testing")
    print ("\t or run curl or swift commmand line client:")
    print ("\t\t curl -k -v -H 'X-Storage-User: test:tester' -H 'X-Storage-Pass: testing'")
    print ("\t\t\t https://%s.%s/auth/v1.0" % (hostname,mydomain))
    print ("\t ")
    print ("\n") 

if __name__=="__main__":
    main(sys.argv[1:])
    sys.exit()

